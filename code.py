# -*- coding: utf-8 -*-
"""Untitled41.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fJ-lSqoQzyi8xfUlokT9YHC9JgiAkInm
"""

import numpy as np
import matplotlib.pyplot as plt


def rand():
    return np.random.uniform(0, 1)


def selection(fitness):
    total = sum(fitness)
    return fitness / total


def cumulative(fitness):
    cum_prob = []
    cum_prob.append(fitness[0])
    for i in range(1, 20):
        cum_prob.append(fitness[i] + cum_prob[i - 1])
    return cum_prob


def get_parents_index(cum_prob):
    r = rand()
    for i in range(20):
        if r <= cum_prob[i]:
            return i


def crossover(child_1, child_2, crossover_rate):
    r = rand()
    cp = int(r * 5)

    if r <= crossover_rate:
        for i in range(cp, 5):
            temp = child_2[i]
            child_2[i] = child_1[i]
            child_1[i] = temp


def mutation(chromosome, mutation_rate):
    for i in range(5):
        r = rand()
        if r < mutation_rate:
            if chromosome[i] == 0:
                chromosome[i] = 1
            else:
                chromosome[i] = 0


def elitism(fitness, flag):
    max_fitness = -1
    max_fitness_index = -1
    for i in range(20):
        if fitness[i] > max_fitness and i != flag:
            max_fitness = fitness[i]
            max_fitness_index = i
    return max_fitness_index


def run(population_size, num_generations, chromosome_length, crossover_rate, mutation_rate):
    old_population = np.random.randint(0, 2, size=(20, 5))
    best_fitness = []
    average_fitness = []
    for generation_index in range(num_generations):
        new_population = []
        fitness = []
        for i in range(population_size):
            fitness_score = sum(old_population[i])
            fitness.append(fitness_score)
        elitism_index1 = elitism(fitness, -1)
        elitism_index2 = elitism(fitness, elitism_index1)
        new_population.append(list(old_population[elitism_index1]))
        new_population.append(list(old_population[elitism_index2]))
        for j in range(10):
            cum_prob = cumulative(selection(fitness))
            parent_1 = old_population[get_parents_index(cum_prob)]
            parent_2 = old_population[get_parents_index(cum_prob)]
            child_1 = []
            child_2 = []
            for i in range(chromosome_length):
                child_1.append(parent_1[i])
                child_2.append(parent_2[i])
            crossover(child_1, child_2, crossover_rate)
            mutation(child_1, mutation_rate)
            mutation(child_2, mutation_rate)
            new_population.append(child_1)
            new_population.append(child_2)
        old_population = new_population.copy()
        best_fitness.append(max(fitness))
        average_fitness.append(sum(fitness) / len(fitness))
    print("Best Fitness is:")
    print(best_fitness)
    print("Average Fitness is:")
    print(average_fitness)
    plt.plot(best_fitness)
    plt.title("Best Fitness")
    plt.ylabel("High fitness")
    plt.xlabel('Generations')
    plt.show()
    plt.plot(average_fitness)
    plt.title("Average Fitness")
    plt.ylabel("Mean of fitness")
    plt.xlabel('Generations')
    plt.show()


population_size = 20
chromosome_length = 5
crossover_rate = 0.6
mutation_rate = 0.05
num_generations = 100

for i in range(10):
    run(population_size, num_generations, chromosome_length, crossover_rate, mutation_rate)